from django.shortcuts import render, get_object_or_404
from .models import Article, Comment
#When the articles have become increasingly numerous, adding pagination becomes a great idea
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
#Import the form we gonna share
from .forms import EmailShareForm, CommentForm
from django.core.mail import send_mail

#Allow Tagging 
from taggit.models import Tag
"""
CLASS BASED VIEWS IMPORTS
"""
from django.views.generic import ListView

from django.db.models import Count

# Create your views here.
"""
A VIEW IS JUST A PYTHON FUNCTION THAT RECEIVES A WEB REQUEST AND RETURNS A WEB RESPONSE.
AFTERWARDS EACH VIEW IS SUPPOSED TO HAVE A URL PATTERN
WE WILL LASTLY CREATE HTML TEMPLATES TO RENDER THE DATA GENERATED BY THE VIEWS
"""

# A Function to Show all the posts from our databases

def article_list(request, tag_slug=None):
    #Retrieve all published articles alone
    articles_list = Article.publishedArticles.all()

    tag = None

    if tag_slug:
        tag = get_object_or_404(Tag, slug=tag_slug)

        articles_list = articles_list.filter(tags__in=[tag])

    # Initialize the paginator with default number of posts
    paginator = Paginator(articles_list, 3)

    #The GET parameter indicates the current page number
    page = request.GET.get('page')

    try:
        articles = paginator.page(page)
    except PageNotAnInteger:
        #Should the page not be an int then it has to be the 1st one
        articles = paginator.page(1)
    except EmptyPage:
        #If the page is out of the range then deliver the last page of results
        articles = paginator.page(paginator.num_pages)

    #Use the imported render shortcut to show all posts
    return render(
        request, 
        'news/article/list.html',
        {
            'page':page,
            'articles':articles,
            'tag':tag
        })


#Display a Single Article
def article_details(req, year, month, day, article):
    
    article = get_object_or_404(Article, 
                                slug=article,
                                status='published',
                                publish__year = year,
                                publish__month = month,
                                publish__day = day                                
                                )
    # VIEW FOR THE COMMENT
    comments = article.comments.filter(active=True)

    new_comment = None

    if req.method == 'POST':
        
        comment_form = CommentForm(data=req.POST)

        if comment_form.is_valid():
            new_comment = comment_form.save(commit=False)
            new_comment.article = article
            new_comment.save()

    else:
        comment_form = CommentForm()

    #List of similar articles
    article_tags_ids = article.tags.values_list('id',flat=True)
    similar_articles = Article.publishedArticles.filter(tags__in=article_tags_ids).exclude(id=article.id)

    

    return render(req, 'news/article/detail.html',{
        'article':article, 'comments':comments,
        'new_comment':new_comment,
        'comment_form': comment_form,
        'similar_articles':similar_articles,
        })



# SHARE THE ARTICLES
def share_article(request, article_id):

    article = get_object_or_404(Article, id=article_id, status='published')
    sent = False

    if request.method == 'POST':
        #FORM HAS BEEN SUBMITTED
        form = EmailShareForm(request.POST)
        if form.is_valid():
            #All fields have been verified
            cd = form.cleaned_data

            #Send the email
            article_url = request.build_absolute_uri(article.get_absolute_url())

            subject = f"{cd['name']} recommends you read {article.title}"

            message = f"Read {article.title} at {article_url}\n\n"

            send_mail(subject, message, 'admin@thebackendguru', [cd['to']])

            sent = True

    else:
        form = EmailShareForm()
        
    return render(request, 'news/article/share.html', {'article':article, 'form':form, 'sent':sent })




"""
_________________CLASS BASED VIEWS_______________________

1. AWESOME ADVANTAGES INCLUDE THE BASE VIEW CLASSES PROVIDED BY PYTHON
2. INHERIT FROM Views class which handles HTTP method dispatching
3. Organize Code related to HTTP METHODS, i.e. GET, POST, or PUT in SEPERATE METHODS INSTEAD OF CONDITIONAL BRANCHING
4. USING MULTIPLE INHERITANCE TO CREATE REUSABLE VIEWS KNOWN AS MIXINGS

"""

# class ArticleListView(ListView):
#     queryset = Article.publishedArticles.all()
#     context_object_name = 'articles'
#     paginate_by = 3
#     template_name = 'news/article/list.html'







